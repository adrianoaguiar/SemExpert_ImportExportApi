<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-11 at 20:28:07.
 */
class SemExpert_ImportExportApi_Model_Import_ApiTest extends PHPUnit_Framework_TestCase {

    /**
     * @var SemExpert_ImportExportApi_Model_Import_Api
     */
    protected $object;

    /**
     * Uniqid created for avoiding name collissions
     *
     * @var string
     */
    protected static $id;

    /**
     * Valid CSV file contents
     *
     * @var string
     */
    protected $valid_file;

    public static function setUpBeforeClass()
    {
        self::$id = uniqid();
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Mage::getModel('importexportapi/import_api');

        foreach (Mage::getModel('catalog/product')->getResource()->getEntityType()->getAttributeSetCollection() as $set) {
            break;
        }

        $required_attributes = array();

        foreach(Mage::getModel('eav/entity_attribute')->getCollection()->setAttributeSetFilter($set->getAttributeSetId()) as $attr) {
            if ($attr->getIsRequired()) {
                $required_attributes[] = $attr;
            }
        }

        ob_start();
        $out = fopen('php://output', 'w');
        $columns = array( '_type'  , '_attribute_set');
        $values = array(  'simple' , $set->getAttributeSetName());

        foreach ($required_attributes as $attr) {
            $columns[] = $attr->getAttributeCode();

            if ($attr->getSourceModel()) {
                $source = Mage::getModel($attr->getSourceModel());
                $options = $source->getAllOptions(false);
                $opt = end($options);
                $values[] = $opt['value'];
            } else {
                $values[] = self::$id;
            }
        }

        fputcsv($out, $columns);
        fputcsv($out, $values);
        fclose($out);

        $content = ob_get_clean();

        $this->valid_file = $content;

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        if (file_exists(Mage::getBaseDir('var') . '/importexport/catalog_product.csv')) {
            unlink(Mage::getBaseDir('var') . '/importexport/catalog_product.csv');
        }
    }

    /**
     * @covers SemExpert_ImportExportApi_Model_Import_Api::validate
     */
    public function testValidate() {

        $file = new stdClass();
        $file->content = base64_encode($this->valid_file);
        $file->mime = 'text/csv';

        try {
            $result = $this->object->validate($file, 'catalog_product', 'append');
            $this->assertEquals(1, $result->processed_rows_count);
            $this->assertEquals(0, $result->invalid_rows_count);
            $this->assertEquals(1, $result->processed_entities_count);
            $this->assertEquals(0, $result->errors_count);
        } catch (Mage_Api_Exception $e) {
            $this->fail($e->getCustomMessage());
        } catch (Exception $e) {
            $this->fail($e->getMessage());
        }

    }
    /**
     * @covers SemExpert_ImportExportApi_Model_Import_Api::validate
     * @expectedException Mage_Api_Exception
     */
    public function testValidateFailed() {
        $file = new stdClass();
        $file->mime = "";
        $file->content = "";
        $this->assertTrue($this->object->validate($file, 'catalog_product', 'append'));
    }

    /**
     * @covers SemExpert_ImportExportApi_Model_Import_Api::start
     * @depends testValidate
     */
    public function testStart() {

        try {
            $this->object->start('catalog_product', 'append');

            /* @var $product Mage_Catalog_Model_Product */
            $product = Mage::getModel('catalog/product')->loadByAttribute('sku', self::$id);
            $this->assertGreaterThan(0, $product->getId());

            if ($product->getId()) {
                $product->delete();
            }
        } catch (Exception $e) {
            $this->fail($e->getMessage());
        }

    }

}
